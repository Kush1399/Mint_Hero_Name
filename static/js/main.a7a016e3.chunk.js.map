{"version":3,"sources":["assets/twitter-logo.svg","App.jsx","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","chainId","alert","length","account","setupEventListener","connectWallet","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","myEpicNft","abi","on","from","tokenId","toNumber","err","error","askContractToMintNFT","connectedContract","makeAnEpicNFT","txn","wait","hash","useEffect","className","onClick","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7a016e3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React from \"react\";\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport myEpicNft from './utils/MyEpicNFT.json'\n\n// Constants\nconst TWITTER_HANDLE = 'kushagra_shiv';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = 'https://testnets.opensea.io/assets';\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0x2f257cE4507532270D6AEEF3D7589676C977958e\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n    let chainId = await ethereum.request({ method: 'eth_chainId' });\n    console.log(\"Connected to chain \" + chainId);\n\n    const rinkebyChainId = \"0x4\";\n    if (chainId !== rinkebyChainId) {\n      alert(\"You are not connected to the Rinkeby Test Network!\");\n      return;\n    }\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found!\");\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Get metamask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n      let chainId = await ethereum.request({ method: 'eth_chainId' });\n      console.log(\"Connected to chain \" + chainId);\n\n\n      const rinkebyChainId = \"0x4\";\n      if (chainId !== rinkebyChainId) {\n        alert(\"You are not connected to the Rinkeby Test Network!\");\n        return;\n      }\n      console.log(\"Connected to account:\", accounts[0]);\n      alert(\"Connected!\");\n      setCurrentAccount(accounts[0]);\n      setupEventListener();\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const setupEventListener = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: ${OPENSEA_LINK}/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n        });\n        console.log(\"Setup Event Listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  const askContractToMintNFT = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        console.log(\"Goint to pop wallet to pay gas!\");\n\n        let txn = await connectedContract.makeAnEpicNFT();\n        console.log(\"Mining...\");\n        await txn.wait();\n        console.log(`Mined! See transaction at: https://rinkeby.etherscan.io/tx/${txn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button className=\"cta-button connect-wallet-button\" onClick={connectWallet}>\n      Connect to Wallet\n    </button>\n  );\n\n  useEffect(() => {\n    checkIfWalletIsConnected()\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\" ? renderNotConnectedContainer() : <button onClick={askContractToMintNFT} className=\"cta-button connect-wallet-button\">Mint NFT</button>}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}